---
name: "Check for Semantic PR and Commit Titles"

on:
  pull_request:
    types: [ opened, reopened, synchronize, edited ]
  workflow_call:
    inputs:
      COMMITS_HISTORY:
        description: 'Number of commits to consider, starting with most recent (e.g. 1 = only look at most recent).'
        # 250 appears to be the limit of `gh api --paginate $COMMITS_URL`
        default: 250
        required: false
        type: number

env:
  PR_TITLE: ${{ github.event.pull_request.title }}
  COMMITS_URL: ${{ github.event.pull_request.commits_url }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SEMANTIC_PATTERN: |-
    ^(Merge .*branch '.+'( of .+)? into|Revert ".+"|(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([^)]+\))?: +[^ ])

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Fetch PR Details
      shell: bash
      run: |
        json=$( gh api --paginate $COMMITS_URL )
        echo 'commits<<EOF' >> $GITHUB_ENV
        echo "COMMITS_HISTORY = ${{ inputs.COMMITS_HISTORY }}"
        echo $json | jq --raw-output '.[] | [.sha, (.commit.message | split("\n") | first)] | join(" ")'
        echo $json | jq --raw-output '.[] | [.sha, (.commit.message | split("\n") | first)] | join(" ")' | tail -"${{ inputs.COMMITS_HISTORY }}" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: Check PR Title and Commit Title(s)
      shell: bash
      run: |
        # expected env vars: SEMANTIC_PATTERN, PR_TITLE, commits
        exit_code=0
        
        if [[ ! $PR_TITLE =~ $SEMANTIC_PATTERN ]]; then
          echo ::error::PR title not semantic: "$PR_TITLE"
          exit_code=1
        else
          echo PR title OK: "$PR_TITLE"
        fi
        
        while read -r commit; do
          commit_title=${commit:41}
          commit_hash_short=${commit:0:7}
        
          if [[ ! $commit_title =~ $SEMANTIC_PATTERN ]]; then
            echo ::error::$commit_hash_short not semantic: "$commit_title"
            exit_code=1
          else
            echo $commit_hash_short OK: "$commit_title"
          fi
        done <<< $commits
        
        if [ $exit_code -ne 0 ]; then
          echo
          echo "This repository uses semantic commit messages"
          echo "check out https://www.conventionalcommits.org/ for more information"
          echo "and rewrite any rejected commit messages to pass CI - thanks!"
          echo
        fi
        
        exit $exit_code
